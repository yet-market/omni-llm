AWSTemplateFormatVersion: '2010-09-09'
Description: 'Omni-LLM Universal AI Lambda Gateway - Minimal Infrastructure'

Parameters:
  Environment:
    Type: String
    Default: 'staging'
    AllowedValues: ['staging', 'prod']
    Description: 'Environment name'
  
  LambdaMemorySize:
    Type: Number
    Default: 1024
    Description: 'Lambda function memory size in MB'
  
  LambdaTimeout:
    Type: Number
    Default: 900
    Description: 'Lambda function timeout in seconds'
  
  APIThrottleRate:
    Type: Number
    Default: 100
    Description: 'API Gateway throttle rate per second'
  
  APIThrottleBurst:
    Type: Number
    Default: 200
    Description: 'API Gateway throttle burst limit'
  
  APIKeyValue:
    Type: String
    NoEcho: true
    Description: 'API Key for accessing the gateway'
    Default: ''

Resources:
  # IAM Role for Lambda (minimal permissions)
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'omni-llm-lambda-role-${Environment}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
      Policies:
        - PolicyName: S3ReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource: '*'
                Condition:
                  StringLike:
                    's3:prefix': 
                      - 'vectors/*'
                      - 'documents/*'

  # CloudWatch Log Group
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/omni-llm-gateway-${Environment}'
      RetentionInDays: 30

  # Lambda Function
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'omni-llm-gateway-${Environment}'
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'headers': {
                      'Content-Type': 'application/json',
                      'Access-Control-Allow-Origin': '*'
                  },
                  'body': '{"message": "Omni-LLM Gateway - will be updated by deployment script"}'
              }
      Handler: src.lambda_function.lambda_handler
      Runtime: python3.11
      MemorySize: !Ref LambdaMemorySize
      Timeout: !Ref LambdaTimeout
      Architectures:
        - arm64
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          AWS_REGION: !Ref AWS::Region
          LOG_LEVEL: !If [IsProd, 'INFO', 'DEBUG']
          ENABLE_XRAY_TRACING: 'true'
          ENABLE_METRICS: 'true'
          METRICS_NAMESPACE: !Sub 'OmniLLM-${Environment}'
      TracingConfig:
        Mode: Active

  # API Gateway REST API
  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'omni-llm-api-${Environment}'
      Description: 'Omni-LLM Universal AI Gateway API'
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resource - /invoke
  InvokeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: 'invoke'

  # API Gateway Method - POST /invoke
  InvokeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref InvokeResource
      HttpMethod: POST
      AuthorizationType: NONE
      ApiKeyRequired: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
        - StatusCode: '400'
        - StatusCode: '401'
        - StatusCode: '500'

  # API Gateway Method - OPTIONS /invoke (CORS)
  InvokeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref InvokeResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: '200'
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,x-api-key'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: '200'
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # API Gateway Resource - /health
  HealthResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref RestAPI
      ParentId: !GetAtt RestAPI.RootResourceId
      PathPart: 'health'

  # API Gateway Method - GET /health
  HealthMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref RestAPI
      ResourceId: !Ref HealthResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'

  # Lambda Permission for API Gateway
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LambdaFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestAPI}/*/*'

  # API Gateway Deployment
  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - InvokeMethod
      - InvokeOptionsMethod
      - HealthMethod
    Properties:
      RestApiId: !Ref RestAPI
      Description: !Sub 'Deployment for ${Environment}'

  # API Gateway Stage
  APIStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      RestApiId: !Ref RestAPI
      DeploymentId: !Ref APIDeployment
      StageName: !Ref Environment
      Description: !Sub 'Stage for ${Environment}'
      TracingEnabled: true
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          LoggingLevel: INFO
          DataTraceEnabled: !If [IsProd, false, true]
          MetricsEnabled: true
          ThrottlingRateLimit: !Ref APIThrottleRate
          ThrottlingBurstLimit: !Ref APIThrottleBurst

  # API Gateway API Key
  APIKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Sub 'omni-llm-api-key-${Environment}'
      Description: !Sub 'API Key for Omni-LLM Gateway ${Environment}'
      Enabled: true
      Value: !Ref APIKeyValue

  # API Gateway Usage Plan
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: APIStage
    Properties:
      UsagePlanName: !Sub 'omni-llm-usage-plan-${Environment}'
      Description: !Sub 'Usage plan for Omni-LLM API ${Environment}'
      Throttle:
        RateLimit: !Ref APIThrottleRate
        BurstLimit: !Ref APIThrottleBurst
      Quota:
        Limit: !If [IsProd, 100000, 10000]
        Period: DAY
      ApiStages:
        - ApiId: !Ref RestAPI
          Stage: !Ref Environment

  # API Gateway Usage Plan Key
  UsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref APIKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

# Conditions for environment-specific settings
Conditions:
  IsProd: !Equals [!Ref Environment, 'prod']

Outputs:
  APIEndpoint:
    Description: 'API Gateway endpoint URL'
    Value: !Sub 'https://${RestAPI}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-APIEndpoint'

  APIKey:
    Description: 'API Key for accessing the gateway'
    Value: !Ref APIKey
    Export:
      Name: !Sub '${AWS::StackName}-APIKey'

  LambdaFunctionArn:
    Description: 'Lambda function ARN'
    Value: !GetAtt LambdaFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaArn'

  LambdaFunctionName:
    Description: 'Lambda function name'
    Value: !Ref LambdaFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'