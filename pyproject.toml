[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "omni-llm"
version = "1.0.0"
description = "Universal AI Lambda Gateway - A serverless AWS Lambda function for unified LLM interactions"
authors = [
    {name = "Temkit Sid-Ali", email = "contact@yet.lu"}
]
license = {text = "MIT"}
readme = "README.md"
requires-python = ">=3.11"
keywords = ["ai", "llm", "lambda", "serverless", "rag", "mcp", "aws"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
]
dependencies = [
    "pydantic>=2.5.0",
    "fastapi>=0.104.0",
    "langchain-core>=0.3.0",
    "langchain-community>=0.3.0",
    "boto3>=1.35.0",
    "requests>=2.31.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.9.0",
    "isort>=5.12.0",
    "mypy>=1.6.0",
    "pylint>=3.0.0",
    "pre-commit>=3.5.0",
]
providers = [
    "langchain-openai>=0.2.0",
    "langchain-anthropic>=0.2.0",
    "langchain-aws>=0.2.0",
    "langchain-google-vertexai>=2.0.0",
    "langchain-mistralai>=0.2.0",
    "langchain-cohere>=0.3.0",
    "langchain-groq>=0.2.0",
]
vectorstores = [
    "langchain-pinecone>=0.2.0",
    "langchain-chroma>=0.2.0",
    "opensearch-py>=2.0.0",
    "faiss-cpu>=1.8.0",
]
mcp = [
    "langchain-mcp-adapters>=0.1.0",
    "mcp>=1.0.0",
]
all = [
    "omni-llm[dev,providers,vectorstores,mcp]"
]

[project.urls]
Homepage = "https://github.com/yet-market/omni-llm"
Documentation = "https://github.com/yet-market/omni-llm/docs"
Repository = "https://github.com/yet-market/omni-llm.git"
Issues = "https://github.com/yet-market/omni-llm/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md"]

[tool.black]
line-length = 88
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["omni_llm"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "boto3.*",
    "botocore.*",
    "langchain.*",
    "pinecone.*",
    "opensearchpy.*",
    "faiss.*",
    "chromadb.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.pylint.messages_control]
disable = [
    "too-few-public-methods",
    "too-many-arguments",
    "too-many-instance-attributes",
    "missing-class-docstring",
    "missing-function-docstring",
]

[tool.pylint.format]
max-line-length = 88

[tool.bandit]
exclude_dirs = ["tests", "test_*"]
skips = ["B101", "B601"]